AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation Template to deploy VPC / Network

Parameters:
  # values to pass to template at runtime
  Environment:
    Type: String
    AllowedValues:
      - Dev
      - Production
    Default: Dev
  CidrPrefix:
    Default: '10.10'
    Type: String
  SubnetNetworkMaskBits:
    Default: 8
    Type: String
    Description: For /24, use 8 - Value is inversed
  ResourcePrefix:
    Default: AWS
    Type: String
    Description: Prefix for all AWS resources
  WhitelistIP:
    Type: String
    Description: IP address to whitelist to access bastion server
  InstanceAMI:
    Default: ami-02f26adf094f51167
    Type: AWS::EC2::Image::Id
  InstanceType:
    Default: t2.micro
    Type: String
  NATKeyName:
    Default: None
    Type: String
    Description: NAT Instance keypair - For dev only
  BastionKeyName:
    Default: None
    Type: String
    Description: Bastion Instance keypair
  CreateBastion:
    Default: True
    AllowedValue:
    - True
    - False
    Description: Flag to create bastion server



# Deployment Conditions
Conditions:
  CreateProdResources: !Equals [ !Ref Environment, Production ]
  CreateDevResources: !Equals [ !Ref Environment, Dev ]
  CreateBastionResources: !Equals [ !Ref CreateBastion, True ]

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub '${CidrPrefix}.0.0/16'
      Tags:
      - Key: Name
        Value: !Sub '${ResourcePrefix}-VPC'
      - Key: Description
        Value: !Sub 'VPC for ${ResourcePrefix}'

  # 3 Subnet for Public Internet Gateway
  PublicSubnetAZ1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select
      - 0
      - !Cidr
        - !GetAtt VPC.CidrBlock
        - 6
        - !Ref SubnetNetworkMaskBits
      AvailabilityZone: !Select
      -  0
      - !GetAZs ""
      Tags:
      - Key: Name
        Value: !Sub '${ResourcePrefix}-SUBNET-IGW-AZ1'
      - Key: Description
        Value: !Sub 'Public subnet for ${ResourcePrefix}'

  PublicSubnetAZ2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select
      - 1
      - !Cidr
        - !GetAtt VPC.CidrBlock
        - 6
        - !Ref SubnetNetworkMaskBits
      AvailabilityZone: !Select
      - 1
      - !GetAZs ""
      Tags:
      - Key: Name
        Value: !Sub '${ResourcePrefix}-SUBNET-IGW-AZ2'
      - Key: Description
        Value: !Sub 'Public subnet for ${ResourcePrefix}'

  PublicSubnetAZ3:
    Type: AWS::EC2::Subnet
    Condition: CreateProdResources
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select
      - 4
      - !Cidr
        - !GetAtt VPC.CidrBlock
        - 6
        - !Ref SubnetNetworkMaskBits
      AvailabilityZone: !Select
      - 2
      - !GetAZs ""
      Tags:
      - Key: Name
        Value: !Sub '${ResourcePrefix}-SUBNET-IGW-AZ3'
      - Key: Description
        Value: !Sub 'Public subnet for ${ResourcePrefix}'

  # 3 Subnets for NAT
  PrivateSubnetAZ1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select
      - 2
      - !Cidr
        - !GetAtt VPC.CidrBlock
        - 6
        - !Ref SubnetNetworkMaskBits
      AvailabilityZone: !Select
      - 0
      - !GetAZs ""
      Tags:
      - Key: Name
        Value: !Sub '${ResourcePrefix}-SUBNET-NAT-AZ1'
      - Key: Description
        Value: !Sub 'Private subnet for ${ResourcePrefix}'

  PrivateSubnetAZ2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select
      - 3
      - !Cidr
        - !GetAtt VPC.CidrBlock
        - 6
        - !Ref SubnetNetworkMaskBits
      AvailabilityZone: !Select
      - 1
      - !GetAZs ""
      Tags:
      - Key: Name
        Value: !Sub '${ResourcePrefix}-SUBNET-NAT-AZ2'
      - Key: Description
        Value: !Sub 'Private subnet for ${ResourcePrefix}'

  PrivateSubnetAZ3:
    Type: AWS::EC2::Subnet
    Condition: CreateProdResources
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select
      - 5
      - !Cidr
        - !GetAtt VPC.CidrBlock
        - 6
        - !Ref SubnetNetworkMaskBits
      AvailabilityZone: !Select
      - 2
      - !GetAZs ""
      Tags:
      - Key: Name
        Value: !Sub '${ResourcePrefix}-SUBNET-NAT-AZ3'
      - Key: Description
        Value: !Sub 'Private subnet for ${ResourcePrefix}'

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
      - Key: Name
        Value: !Sub '${ResourcePrefix}-IGW'
      - Key: Description
        Value: !Sub 'Internet Gateway for ${ResourcePrefix}'
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # 3 RouteTables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Ref !Sub '${ResourcePrefix}-RT-IGW'
      - Key: Description
        Value: !Sub 'Route Table Routing to IGW for ${ResourcePrefix}'
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  NATRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Ref !Sub '${ResourcePrefix}-RT-NAT'
      - Key: Description
        Value: !Sub 'Route Table Routing to NAT for ${ResourcePrefix}'
  NATGatewayRoute:
    Type: AWS::EC2::Route
    Condition: CreateProdResources
    Properties:
      RouteTableId: !Ref NATRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
  NATInstanceRoute:
    DependsOn:
    - NATEC2Instance
    - NATRouteTable
    Type: AWS::EC2::Route
    Condition: CreateDevResources
    Properties:
      RouteTableId: !Ref NATRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NATEC2Instance
  # RouteTable Association to Subnets
  PublicRouteTableSubnetAZ1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetAZ1
  PublicRouteTableSubnetAZ2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetAZ2
  PublicRouteTableSubnetAZ3Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateProdResources
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetAZ3
  NATRouteTableSubnetAZ1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NATRouteTable
      SubnetId: !Ref PrivateSubnetAZ1
  NATRouteTableSubnetAZ2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NATRouteTable
      SubnetId: !Ref PrivateSubnetAZ2
  NATRouteTableSubnetAZ3Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateProdResources
    Properties:
      RouteTableId: !Ref NATRouteTable
      SubnetId: !Ref PrivateSubnetAZ3

  # Bastion/Jump/Tunnel resource
  BastionEC2Instance:
    Type: AWS::EC2::Instance
    Condition: CreateBastionResources
    DependsOn:
    - PublicSubnetAZ1
    Properties:
      ImageId: !Ref InstanceAMI
      InstanceType: !Ref InstanceType
      KeyName: !Ref BastionKeyName
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeviceIndex: 0
        GroupSet:
        - !Ref BastionSecurityGroup
        SubnetId: !Ref PublicSubnetAZ1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          /bin/echo -e "LANG='en_US.UTF-8'\nLC_ALL='en_US.UTF-8'\nLC_CTYPE='en_US.UTF-8'" > /etc/environment
          yum update -y
          yum install -y mysql jq vim zip unzip
      Tags:
      - Key: Name
        Value: !Sub '${ResourcePrefix}-EC2-Bastion'
  BastionElasticIPAddress:
    Type: AWS::EC2::EIP
    Condition: CreateBastionResources
    Properties:
      Domain: VPC
      InstanceId: !Ref BastionEC2Instance
      Tags:
      - Key: Name
        Value: !Sub '${ResourcePrefix}-EIP-Bastion'
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateBastionResources
    Properties:
      GroupDescription: Allow ssh access into VPC
      GroupName: !Sub '${ResourcePrefix}-SG-BASTION'
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - Description: Allow ssh access from single IP
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Sub '${WhitelistIP}/32'
      Tags:
      - Key: Name
        Value: !Sub '${ResourcePrefix}-SG-BASTION'
      - Key: Description
        Value: Security Group for Bastion

  # NAT Gateway - create only in production environment
  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Condition: CreateProdResources
    Properties:
      Domain: VPC
  NATGateway:
    Type: AWS::EC2::NatGateway
    Condition: CreateProdResources
    Properties:
      SubnetId: !Ref PublicSubnetAZ1
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      Tags:
      - Key: Name
        Value: !Ref !Sub '${ResourcePrefix}-NAT'
      - Key: Description
        Value: Nat Gateway

  # NAT Instance - create only in dev environment (cheaper)
  NATSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateDevResources
    Properties:
      GroupDescription: Allow Access for NAT Instance
      GroupName: !Sub '${ResourcePrefix}-SG-NAT'
      SecurityGroupIngress:
      - Description: Allow access from private subnet 1
        IpProtocol: -1
        FromPort: -1
        ToPort: -1
        CidrIp: !Select
        - 2
        - !Cidr
          - !GetAtt VPC.CidrBlock
          - 6
          - !Ref SubnetNetworkMaskBits
      - Description: Allow access from private subnet 2
        IpProtocol: -1
        FromPort: -1
        ToPort: -1
        CidrIp: !Sub
        !Select
        - 3
        - !Cidr
          - !GetAtt VPC.CidrBlock
          - 6
          - !Ref SubnetNetworkMaskBits
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${ResourcePrefix}-SG-NAT'
      - Key: Description
        Value: Security Group for NAT Instance
  NATSGIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref NATSecurityGroup
      Description: Allow bastion server to access NAT instance via SSH
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroup: SourceSecurityGroupId: !GetAtt BastionSecurityGroup.GroupId
  NATEC2Instance:
    DependsOn:
    - PublicSubnetAZ1
    Type: AWS::EC2::Instance
    Condition: CreateDevResources
    Properties:
      ImageId: !Ref InstanceAMI
      InstanceType: !Ref InstanceType
      KeyName: !Ref NATKeyName
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeviceIndex: 0
        GroupSet:
        - !Ref NATSecurityGroup
        SubnetId: !Ref PublicSubnetAZ1
      SourceDestCheck: false
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo sysctl -w net.ipv4.ip_forward=1
          sudo /sbin/iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
          sudo /bin/echo -e "LANG='en_US.UTF-8'\nLC_ALL='en_US.UTF-8'\nLC_CTYPE='en_US.UTF-8'" > /etc/environment
      Tags:
      - Key: Name
        Value: !Sub '${ResourcePrefix}-EC2-NAT'
  NATElasticIPAddress:
    Type: AWS::EC2::EIP
    Condition: CreateDevResources
    Properties:
      Domain: VPC
      InstanceId: !Ref NATEC2Instance
      Tags:
      - Key: Name
        Value: !Sub '${ResourcePrefix}-EIP-NAT'

Outputs:
  VPCID:
    Description: ID of VPC
    Value: !Ref VPC
    Export:
      Name: Infra-VPC
  CidrBlock:
    Description: CIDR prefix
    Value: !GetAtt VPC.CidrBlock
    Export:
      Name: Infra-CIDR
  PublicSubnet1:
    Description: ID of Public subnet 1
    Value: !Ref PublicSubnetAZ1
    Export:
      Name: Infra-Subnet-Public1
  PublicSubnet2:
    Description: ID of Public subnet 2
    Value: !Ref PublicSubnetAZ2
    Export:
      Name: Infra-Subnet-Public2
  PublicSubnet3:
    Condition: CreateProdResources
    Description: ID of Public subnet 3
    Value: !Ref PublicSubnetAZ3
    Export:
      Name: Infra-Subnet-Public3
  PrivateSubnet1:
    Description: ID of NAT-Private subnet 1
    Value: !Ref PrivateSubnetAZ1
    Export:
      Name: Infra-Subnet-NAT1
  PrivateSubnet2:
    Description: ID of NAT-Private subnet 2
    Value: !Ref PrivateSubnetAZ2
    Export:
      Name: Infra-Subnet-NAT2
  PrivateSubnet3:
    Condition: CreateProdResources
    Description: ID of NAT-Private subnet 3
    Value: !Ref PrivateSubnetAZ3
    Export:
      Name: Infra-Subnet-NAT3
  Environment:
    Description: Environment value
    Value: !Ref Environment
    Export:
      Name: Infra-Env